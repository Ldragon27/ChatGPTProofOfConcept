@page "/dalle"
@using ChatGPTProofOfConcept.Data
@using OpenAI.GPT3;
@using OpenAI.GPT3.Managers;
@using OpenAI.GPT3.ObjectModels;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@using OpenAI.GPT3.Extensions;
@inject IConfiguration _configuration

<PageTitle>Dall-E Demo</PageTitle>
<h1>Dall-E Demo</h1>

<div class="row">
    <div class="col">
        <h6>This component demonstrates Dall-E from the OpenAI API</h6>
        <br>
        <br>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <InputTextArea class="form-control" type="text" placeholder="A dog on the moon..." @bind-Value="message.Input"></InputTextArea>
                <br>
                <button class="btn btn-primary" @onclick="CallService">Submit</button>
            </div>
        </div>
    </div>
</div>
<br>
<div class="row"> </div>
<br>
<div class="row">
    <div class="col-6">
        <div class="card">
            <h5 class="card-header" style="color:black;">Response</h5>
            <div class="card-body">
                <p class="card-text">@message.Output</p>
                <p>@((MarkupString)ImageResponse)</p>
            </div>
        </div>
    </div>
</div>
<br>

@code {
    private Message? message = new();
    string Organization = "";
    string ApiKey = "";
    string ImageResponse = "";

    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    async Task CallService()
    {
        var openAiService = new OpenAIService(new OpenAiOptions()
        {
            ApiKey = ApiKey,
            Organization = Organization
        });

        var imageResult =
        await openAiService.Image
        .CreateImage(new ImageCreateRequest
        {
            Prompt = message.Input,
            N = 2,
            Size = StaticValues.ImageStatics.Size.Size256,
            ResponseFormat = StaticValues.ImageStatics.ResponseFormat.Url,
            User = "TestUser"
        });
        if (imageResult.Successful)
        {
            message.Output = "";
            foreach (var image in imageResult.Results)
            {
                ImageResponse += $@"<img src=""{image.Url}"" />&nbsp;&nbsp;";
            }
        }
        else
        {
            if (imageResult.Error == null)
            {
                message.Output = "Unknown Error";
            }
            message.Output =
        $"{imageResult.Error?.Code}: {imageResult.Error?.Message}";
        }
    }
}