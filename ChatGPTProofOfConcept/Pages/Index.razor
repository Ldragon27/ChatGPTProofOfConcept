@page "/ChatGPTProofOfConcept"
@using ChatGPTProofOfConcept.Data
@using OpenAI.GPT3;
@using OpenAI.GPT3.Managers;
@using OpenAI.GPT3.ObjectModels;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@using OpenAI.GPT3.Extensions;
@inject IConfiguration _configuration

<PageTitle>ChatGPT</PageTitle>
<h1>ChatGPT</h1>

<div class="row">
    <div class="col">
        <h6>This component demonstrates fetching data from OpenAI API. This is using GPT 3.5</h6>
        <br>
        <br>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <InputTextArea class="form-control" type="text" placeholder="Start a converstation..." @bind-Value="message.Input"></InputTextArea>
                <br>
                <button class="btn btn-primary" @onclick="CallService">Submit</button>
            </div>
        </div>
    </div>
</div>
<br>
<div class="row"> </div>
<br>
<div class="row">
    <div class="col-6">
        <div class="card">
            <h5 class="card-header" style="color:black;">Response</h5>
            <div class="card-body">
                <p class="card-text" style="color: black;">@message.Output</p>
            </div>
        </div>
    </div>
</div>

@code {
    private Message? message = new();
    string Organization = "";
    string ApiKey = "";

    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }
    //*****


    async Task CallService()
    {
        var openAiService = new OpenAIService(new OpenAiOptions()
        {
            ApiKey = ApiKey,
            Organization = Organization
        });

        var completionResult = await openAiService.ChatCompletion.CreateCompletion(new ChatCompletionCreateRequest
        {
            Messages = new List<ChatMessage>
            {
                ChatMessage.FromSystem("You are a helpful assistant."),
                ChatMessage.FromUser(message.Input),
            },
            Model = Models.ChatGpt3_5Turbo,
            MaxTokens = 50//optional
        });


        //var completionResult =
        //await openAiService.Completions
        //.CreateCompletion(new CompletionCreateRequest()
        //{
        //    Prompt = message.Input,
        //    MaxTokens = 5
        //}, Models.ChatGpt3_5Turbo);
        if (completionResult.Successful)
        {
            message.Output = completionResult
            .Choices.FirstOrDefault().Message.Content ?? "";
        }
        else
        {
            if (completionResult.Error == null)
            {
                message.Output = "Unknown Error";
            }
            message.Output =
            $"{completionResult.Error?.Code}: {completionResult.Error?.Message}";
        }
    }


}
